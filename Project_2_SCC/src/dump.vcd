$date
	Thu Oct 16 23:04:04 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module oct_10_checkpoint $end
$var wire 1 ! halt_f $end
$var wire 32 " instruction_memory_v [31:0] $end
$var wire 2 # err_bits [1:0] $end
$var wire 32 $ data_memory_in_v [31:0] $end
$var reg 1 % clk $end
$var reg 1 & clk_en $end
$var reg 1 ' rst $end
$scope module topMod $end
$var wire 1 % clk $end
$var wire 1 & clk_en $end
$var wire 1 ! halt_f $end
$var wire 1 ' rst $end
$var wire 1 ( writeBit $end
$var wire 1 ) readBit $end
$var wire 32 * programCounter [31:0] $end
$var wire 32 + instruction_memory_v [31:0] $end
$var wire 32 , instruction [31:0] $end
$var wire 1 - halt $end
$var wire 2 . err_bits [1:0] $end
$var wire 32 / data_memory_in_v [31:0] $end
$var wire 32 0 dataOutMem [31:0] $end
$var wire 32 1 dataIn [31:0] $end
$var wire 32 2 addressFetch [31:0] $end
$scope module memMod $end
$var wire 1 3 instruction_memory_en $end
$var wire 1 % mem_Clk $end
$var wire 32 4 instruction_memory_a [31:0] $end
$var wire 1 - halt_f $end
$var wire 1 ( data_memory_write $end
$var wire 1 ) data_memory_read $end
$var wire 32 5 data_memory_out_v [31:0] $end
$var wire 32 6 data_memory_a [31:0] $end
$var reg 8 7 a [7:0] $end
$var reg 8 8 b [7:0] $end
$var reg 8 9 c [7:0] $end
$var reg 8 : d [7:0] $end
$var reg 32 ; data_memory_in_v [31:0] $end
$var reg 32 < instruction_memory_v [31:0] $end
$var integer 32 = fd [31:0] $end
$var integer 32 > i [31:0] $end
$upscope $end
$scope module scc $end
$var wire 1 % clk $end
$var wire 1 & clk_en $end
$var wire 32 ? dataIn [31:0] $end
$var wire 32 @ instruction [31:0] $end
$var wire 32 A memoryDataIn [31:0] $end
$var wire 1 ' rst $end
$var wire 1 ( writeFlag $end
$var wire 1 B specialEncoding $end
$var wire 1 C setFlags $end
$var wire 4 D secondLevelDecode [3:0] $end
$var wire 1 E regWrite $end
$var wire 1 F regRead $end
$var wire 32 G readDataSec [31:0] $end
$var wire 32 H readDataFirst [31:0] $end
$var wire 32 I readDataDest [31:0] $end
$var wire 32 J programCounter [31:0] $end
$var wire 4 K out_sourceSecReg [3:0] $end
$var wire 4 L out_sourceFirstReg [3:0] $end
$var wire 16 M out_imm [15:0] $end
$var wire 4 N out_destRegister [3:0] $end
$var wire 1 ) memoryRead $end
$var wire 1 O loadStore $end
$var wire 32 P instrcutionForID [31:0] $end
$var wire 1 - halt $end
$var wire 2 Q firstLevelDecode [1:0] $end
$var wire 1 R exe_writeToReg $end
$var wire 32 S exe_writeData [31:0] $end
$var wire 4 T exe_readRegSec [3:0] $end
$var wire 4 U exe_readRegFirst [3:0] $end
$var wire 4 V exe_readRegDest [3:0] $end
$var wire 1 W exeOverride $end
$var wire 16 X exeData [15:0] $end
$var wire 1 Y dataRegisterImm $end
$var wire 1 Z dataRegister $end
$var wire 32 [ dataOut [31:0] $end
$var wire 4 \ branchInstruction [3:0] $end
$var wire 1 ] branch $end
$var wire 3 ^ aluFunction [2:0] $end
$var wire 32 _ addressIn [31:0] $end
$var reg 32 ` data_memory_v [31:0] $end
$var reg 2 a err_bits [1:0] $end
$var reg 32 b instruction_memory_v [31:0] $end
$scope module EXE $end
$var wire 1 % clk $end
$var wire 16 c exeData [15:0] $end
$var wire 32 d memoryDataIn [31:0] $end
$var wire 1 ' rst $end
$var wire 1 B specialEncoding $end
$var wire 4 e sourceSecReg [3:0] $end
$var wire 4 f sourceFirstReg [3:0] $end
$var wire 1 C setFlags $end
$var wire 4 g secondLevelDecode [3:0] $end
$var wire 32 h readDataSec [31:0] $end
$var wire 32 i readDataFirst [31:0] $end
$var wire 32 j readDataDest [31:0] $end
$var wire 16 k imm [15:0] $end
$var wire 2 l firstLevelDecode [1:0] $end
$var wire 4 m destReg [3:0] $end
$var wire 4 n branchInstruction [3:0] $end
$var wire 3 o aluFunctions [2:0] $end
$var reg 33 p aluRegister [32:0] $end
$var reg 1 W exeOverride $end
$var reg 4 q flags [3:0] $end
$var reg 4 r flags_next [3:0] $end
$var reg 32 s immExt [31:0] $end
$var reg 32 t memoryAddressOut [31:0] $end
$var reg 32 u memoryDataOut [31:0] $end
$var reg 1 ) memoryRead $end
$var reg 1 ( memoryWrite $end
$var reg 4 v readRegDest [3:0] $end
$var reg 4 w readRegFirst [3:0] $end
$var reg 4 x readRegSec [3:0] $end
$var reg 33 y tempDiff [32:0] $end
$var reg 32 z writeData [31:0] $end
$var reg 1 R writeToReg $end
$upscope $end
$scope module ID $end
$var wire 1 % clk $end
$var wire 1 ' rst $end
$var wire 1 { specialBit $end
$var wire 4 | sourceSecReg [3:0] $end
$var wire 4 } sourceFirstReg [3:0] $end
$var wire 4 ~ secondLevelDecode [3:0] $end
$var wire 32 !" instruction [31:0] $end
$var wire 16 "" imm [15:0] $end
$var wire 2 #" firstLevelDecode [1:0] $end
$var wire 4 $" destReg [3:0] $end
$var wire 4 %" branchCondition [3:0] $end
$var wire 3 &" aluOperationCommands [2:0] $end
$var reg 3 '" aluFunction [2:0] $end
$var reg 1 ] branch $end
$var reg 4 (" branchInstruction [3:0] $end
$var reg 1 Z dataRegister $end
$var reg 1 Y dataRegisterImm $end
$var reg 2 )" firstLevelDecode_out [1:0] $end
$var reg 1 - halt $end
$var reg 1 O loadStore $end
$var reg 4 *" out_destRegister [3:0] $end
$var reg 16 +" out_imm [15:0] $end
$var reg 4 ," out_sourceFirstReg [3:0] $end
$var reg 4 -" out_sourceSecReg [3:0] $end
$var reg 1 F regRead $end
$var reg 1 E regWrite $end
$var reg 4 ." secondLevelDecode_out [3:0] $end
$var reg 1 C setFlags $end
$var reg 1 B specialEncoding $end
$upscope $end
$scope module IF $end
$var wire 1 % clk $end
$var wire 16 /" exeData [15:0] $end
$var wire 1 W exeOverride $end
$var wire 32 0" fetchedInstruction [31:0] $end
$var wire 16 1" imm16_exe [15:0] $end
$var wire 1 ' rst $end
$var wire 16 2" imm16 [15:0] $end
$var wire 32 3" branchOffsetAddress_exe [31:0] $end
$var wire 32 4" branchOffsetAddress [31:0] $end
$var parameter 32 5" sFilter $end
$var parameter 32 6" sIdle $end
$var reg 32 7" PC [31:0] $end
$var reg 32 8" filteredInstruction [31:0] $end
$var reg 32 9" programCounter [31:0] $end
$var reg 2 :" state [1:0] $end
$var reg 2 ;" stateNext [1:0] $end
$upscope $end
$scope module REGFILE $end
$var wire 1 % clk $end
$var wire 32 <" out_rd [31:0] $end
$var wire 32 =" out_rs1 [31:0] $end
$var wire 32 >" out_rs2 [31:0] $end
$var wire 4 ?" rd [3:0] $end
$var wire 4 @" rs1 [3:0] $end
$var wire 4 A" rs2 [3:0] $end
$var wire 1 ' rst $end
$var wire 1 R write $end
$var wire 32 B" writeData [31:0] $end
$var integer 32 C" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b0 6"
b1 5"
$end
#0
$dumpvars
b10000 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
bx 8"
b0 7"
b10000000000 4"
bx 3"
b10000000000 2"
bx 1"
b10000000000 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
x{
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
bx p
bx o
bx n
bx m
bx l
bx k
b0 j
b0 i
b0 h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
b0 _
bx ^
x]
bx \
b0 [
xZ
xY
bx X
0W
b0 V
b0 U
b0 T
b0 S
0R
bx Q
bx P
xO
bx N
bx M
bx L
bx K
b0 J
b0 I
b0 H
b0 G
xF
xE
bx D
xC
xB
bx A
b10000000000 @
bx ?
bx >
bx =
b10000000000 <
bx ;
bx :
bx 9
bx 8
bx 7
b0 6
b0 5
b0 4
13
b0 2
bx 1
b0 0
bx /
bx .
x-
b10000000000 ,
bx +
b0 *
0)
0(
1'
1&
1%
bx $
bx #
bx "
z!
$end
#5
0%
#10
b10000 C"
1%
#15
0%
#20
b10000 C"
1%
#25
0%
#30
b1 ;"
0'
b10000 C"
1%
#35
0%
#40
1R
b10000000000 S
b10000000000 z
b10000000000 B"
b0 D
b0 g
b0 ."
b0 Q
b0 l
b0 )"
b10000000000 ""
b0 |
b0 }
b0 $"
b0 %"
b0 &"
b0 ~
0{
b0 #"
0-
b10000000000 3"
b10000000000 1"
b10000000000 X
b10000000000 c
b10000000000 /"
b10000000000 M
b10000000000 k
b10000000000 +"
b0 K
b0 e
b0 -"
b0 L
b0 f
b0 ,"
b0 N
b0 m
b0 *"
1F
1E
b0 \
b0 n
b0 ("
b0 ^
b0 o
b0 '"
0C
0B
1Y
0Z
0O
0]
b10000000000 P
b10000000000 !"
b10000000000 8"
b1 :"
1%
#45
0%
#50
b10000000000 S
b10000000000 z
b10000000000 B"
1R
b10000000000 I
b10000000000 j
b10000000000 <"
b10000000000 H
b10000000000 i
b10000000000 ="
b10000000000 G
b10000000000 h
b10000000000 >"
b100 7"
1%
#55
0%
#60
b1001000110100 1
b1001000110100 ;
b1001000110100 ?
b1001000110100 A
b1001000110100 d
b0 I
b0 j
b0 <"
b1 V
b1 v
b1 ?"
1)
b10000000000 2
b10000000000 6
b10000000000 _
b10000000000 t
b1 N
b1 m
b1 *"
1O
b10 Q
b10 l
b10 )"
b1001000110100 S
b1001000110100 z
b1001000110100 B"
1R
b0 ""
b1 $"
b1 %"
b10 #"
b0 3"
b0 1"
b0 X
b0 c
b0 /"
b0 M
b0 k
b0 +"
0F
0E
0Y
b0 4"
b0 2"
b10000000001000000000000000000000 P
b10000000001000000000000000000000 !"
b10000000001000000000000000000000 8"
b10000000001000000000000000000000 ,
b10000000001000000000000000000000 <
b10000000001000000000000000000000 @
b10000000001000000000000000000000 0"
b1000 7"
b100 *
b100 4
b100 J
b100 9"
1%
#65
0%
#70
b101011001111000 1
b101011001111000 ;
b101011001111000 ?
b101011001111000 A
b101011001111000 d
b100 3"
b100 1"
b100 X
b100 c
b100 /"
b100 M
b100 k
b100 +"
b100 ""
b10 $"
b10 %"
b10 N
b10 m
b10 *"
1O
b100 4"
b100 2"
b10000000010000000000000000000100 P
b10000000010000000000000000000100 !"
b10000000010000000000000000000100 8"
b10000000010000000000000000000100 ,
b10000000010000000000000000000100 <
b10000000010000000000000000000100 @
b10000000010000000000000000000100 0"
b10000000100 2
b10000000100 6
b10000000100 _
b10000000100 t
1)
b101011001111000 S
b101011001111000 z
b101011001111000 B"
1R
b10 V
b10 v
b10 ?"
b0 I
b0 j
b0 <"
b1100 7"
b1000 *
b1000 4
b1000 J
b1000 9"
1%
#75
0%
#80
b1000011101100101 1
b1000011101100101 ;
b1000011101100101 ?
b1000011101100101 A
b1000011101100101 d
b1000 ""
b11 $"
b11 %"
b1000 3"
b1000 1"
b1000 X
b1000 c
b1000 /"
b1000 M
b1000 k
b1000 +"
b11 N
b11 m
b11 *"
1O
b1000 4"
b1000 2"
b10000000011000000000000000001000 P
b10000000011000000000000000001000 !"
b10000000011000000000000000001000 8"
b10000000011000000000000000001000 ,
b10000000011000000000000000001000 <
b10000000011000000000000000001000 @
b10000000011000000000000000001000 0"
b10000001000 2
b10000001000 6
b10000001000 _
b10000001000 t
1)
b1000011101100101 S
b1000011101100101 z
b1000011101100101 B"
1R
b11 V
b11 v
b11 ?"
b10000 7"
b1100 *
b1100 4
b1100 J
b1100 9"
b0 I
b0 j
b0 <"
1%
#85
0%
#90
1F
1]
b1000 D
b1000 g
b1000 ."
b11 Q
b11 l
b11 )"
b0 :
b0 9
b0 8
b0 7
b10000000000000000 >
b10000000000000000000000000000011 =
b0 ""
b0 $"
b0 %"
b1000 ~
b11 #"
1-
b0 3"
b0 1"
b0 X
b0 c
b0 /"
b0 M
b0 k
b0 +"
b0 N
b0 m
b0 *"
0O
b0 4"
b0 2"
b11010000000000000000000000000000 P
b11010000000000000000000000000000 !"
b11010000000000000000000000000000 8"
b11010000000000000000000000000000 ,
b11010000000000000000000000000000 <
b11010000000000000000000000000000 @
b11010000000000000000000000000000 0"
b0 2
b0 6
b0 _
b0 t
0)
b0 S
b0 z
b0 B"
0R
b0 V
b0 v
b0 ?"
b10000000000 I
b10000000000 j
b10000000000 <"
b10100 7"
b10000 *
b10000 4
b10000 J
b10000 9"
1%
#95
0%
#100
bx 3"
bx 1"
bx X
bx c
bx /"
bx M
bx k
bx +"
xC
xB
bx ^
bx o
bx '"
bx D
bx g
bx ."
bx Q
bx l
bx )"
bx ""
bx |
bx }
bx $"
bx %"
bx &"
bx ~
x{
bx #"
x-
0F
0]
bx 4"
bx 2"
bx P
bx !"
bx 8"
bx ,
bx <
bx @
bx 0"
b11000 7"
b10100 *
b10100 4
b10100 J
b10100 9"
1%
#105
0%
#110
b11100 7"
b11000 *
b11000 4
b11000 J
b11000 9"
1%
#115
0%
#120
b100000 7"
b11100 *
b11100 4
b11100 J
b11100 9"
1%
#125
0%
#130
b100100 7"
b100000 *
b100000 4
b100000 J
b100000 9"
1%
#135
0%
#140
b101000 7"
b100100 *
b100100 4
b100100 J
b100100 9"
1%
#145
0%
#150
b101100 7"
b101000 *
b101000 4
b101000 J
b101000 9"
1%
#155
0%
#160
b110000 7"
b101100 *
b101100 4
b101100 J
b101100 9"
1%
#165
0%
#170
b110100 7"
b110000 *
b110000 4
b110000 J
b110000 9"
1%
#175
0%
#180
b111000 7"
b110100 *
b110100 4
b110100 J
b110100 9"
1%
#185
0%
#190
b111100 7"
b111000 *
b111000 4
b111000 J
b111000 9"
1%
#195
0%
#200
b1000000 7"
b111100 *
b111100 4
b111100 J
b111100 9"
1%
#205
0%
#210
b1000100 7"
b1000000 *
b1000000 4
b1000000 J
b1000000 9"
1%
#215
0%
#220
b1001000 7"
b1000100 *
b1000100 4
b1000100 J
b1000100 9"
1%
#225
0%
#230
b1001100 7"
b1001000 *
b1001000 4
b1001000 J
b1001000 9"
1%
#235
0%
#240
b1010000 7"
b1001100 *
b1001100 4
b1001100 J
b1001100 9"
1%
#245
0%
#250
b1010100 7"
b1010000 *
b1010000 4
b1010000 J
b1010000 9"
1%
#255
0%
#260
b1011000 7"
b1010100 *
b1010100 4
b1010100 J
b1010100 9"
1%
#265
0%
#270
b1011100 7"
b1011000 *
b1011000 4
b1011000 J
b1011000 9"
1%
#275
0%
#280
b1100000 7"
b1011100 *
b1011100 4
b1011100 J
b1011100 9"
1%
#285
0%
#290
b1100100 7"
b1100000 *
b1100000 4
b1100000 J
b1100000 9"
1%
#295
0%
#300
b1101000 7"
b1100100 *
b1100100 4
b1100100 J
b1100100 9"
1%
#305
0%
#310
b1101100 7"
b1101000 *
b1101000 4
b1101000 J
b1101000 9"
1%
#315
0%
#320
b1110000 7"
b1101100 *
b1101100 4
b1101100 J
b1101100 9"
1%
#325
0%
#330
b1110100 7"
b1110000 *
b1110000 4
b1110000 J
b1110000 9"
1%
