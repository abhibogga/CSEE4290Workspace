$date
	Fri Oct 17 00:39:52 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ucode_tb $end
$var wire 1 ! halt_f $end
$var wire 32 " instruction_memory_v [31:0] $end
$var wire 2 # err_bits [1:0] $end
$var wire 32 $ data_memory_in_v [31:0] $end
$var reg 1 % clk $end
$var reg 1 & clk_en $end
$var reg 1 ' rst $end
$scope module topMod $end
$var wire 1 % clk $end
$var wire 1 & clk_en $end
$var wire 1 ! halt_f $end
$var wire 1 ( readBit $end
$var wire 1 ' rst $end
$var wire 1 ) writeBit $end
$var wire 32 * programCounter [31:0] $end
$var wire 32 + instruction_memory_v [31:0] $end
$var wire 32 , instruction [31:0] $end
$var wire 1 - halt $end
$var wire 2 . err_bits [1:0] $end
$var wire 32 / data_memory_in_v [31:0] $end
$var wire 32 0 dataOutMem [31:0] $end
$var wire 32 1 dataIn [31:0] $end
$var wire 32 2 addressFetch [31:0] $end
$scope module memMod $end
$var wire 1 ( data_memory_read $end
$var wire 1 3 instruction_memory_en $end
$var wire 1 % mem_Clk $end
$var wire 32 4 instruction_memory_a [31:0] $end
$var wire 1 - halt_f $end
$var wire 1 ) data_memory_write $end
$var wire 32 5 data_memory_out_v [31:0] $end
$var wire 32 6 data_memory_a [31:0] $end
$var reg 8 7 a [7:0] $end
$var reg 8 8 b [7:0] $end
$var reg 8 9 c [7:0] $end
$var reg 8 : d [7:0] $end
$var reg 32 ; data_memory_in_v [31:0] $end
$var reg 32 < instruction_memory_v [31:0] $end
$var integer 32 = fd [31:0] $end
$var integer 32 > i [31:0] $end
$upscope $end
$scope module scc $end
$var wire 1 % clk $end
$var wire 1 & clk_en $end
$var wire 32 ? dataIn [31:0] $end
$var wire 32 @ instruction [31:0] $end
$var wire 1 ' rst $end
$var wire 1 ) writeFlag $end
$var wire 32 A ucode_instruction_scc [31:0] $end
$var wire 1 B ucode_flag $end
$var wire 1 C specialEncoding $end
$var wire 1 D setFlags $end
$var wire 4 E secondLevelDecode [3:0] $end
$var wire 1 F regWrite $end
$var wire 1 G regRead $end
$var wire 32 H readDataSec [31:0] $end
$var wire 32 I readDataFirst [31:0] $end
$var wire 32 J readDataDest [31:0] $end
$var wire 32 K programCounter [31:0] $end
$var wire 4 L out_sourceSecReg [3:0] $end
$var wire 4 M out_sourceFirstReg [3:0] $end
$var wire 16 N out_imm [15:0] $end
$var wire 4 O out_destRegister [3:0] $end
$var wire 7 P mul_opcode_scc [6:0] $end
$var wire 4 Q mul_imm_rs_scc [3:0] $end
$var wire 4 R mul_imm_rd_scc [3:0] $end
$var wire 16 S mul_imm_imm_scc [15:0] $end
$var wire 1 T loadStore $end
$var wire 32 U instrcutionForID [31:0] $end
$var wire 1 - halt $end
$var wire 4 V ghost_PC_scc [3:0] $end
$var wire 2 W firstLevelDecode [1:0] $end
$var wire 1 X exe_writeToReg $end
$var wire 32 Y exe_writeData [31:0] $end
$var wire 4 Z exe_readRegSec [3:0] $end
$var wire 4 [ exe_readRegFirst [3:0] $end
$var wire 4 \ exe_readRegDest [3:0] $end
$var wire 1 ] exe_memoryWrite $end
$var wire 32 ^ exe_memoryDataOut [31:0] $end
$var wire 32 _ exe_memoryAddressOut [31:0] $end
$var wire 1 ` exeOverride $end
$var wire 16 a exeData [15:0] $end
$var wire 1 b dataRegisterImm $end
$var wire 1 c dataRegister $end
$var wire 32 d dataOut [31:0] $end
$var wire 4 e branchInstruction [3:0] $end
$var wire 1 f branch $end
$var wire 3 g aluFunction [2:0] $end
$var wire 32 h addressIn [31:0] $end
$var reg 32 i data_memory_v [31:0] $end
$var reg 2 j err_bits [1:0] $end
$var reg 32 k instruction_memory_v [31:0] $end
$scope module EXE $end
$var wire 1 % clk $end
$var wire 16 l exeData [15:0] $end
$var wire 1 ' rst $end
$var wire 1 C specialEncoding $end
$var wire 4 m sourceSecReg [3:0] $end
$var wire 4 n sourceFirstReg [3:0] $end
$var wire 1 D setFlags $end
$var wire 4 o secondLevelDecode [3:0] $end
$var wire 32 p readDataSec [31:0] $end
$var wire 32 q readDataFirst [31:0] $end
$var wire 32 r readDataDest [31:0] $end
$var wire 16 s imm [15:0] $end
$var wire 2 t firstLevelDecode [1:0] $end
$var wire 4 u destReg [3:0] $end
$var wire 4 v branchInstruction [3:0] $end
$var wire 3 w aluFunctions [2:0] $end
$var reg 33 x aluRegister [32:0] $end
$var reg 1 ` exeOverride $end
$var reg 4 y flags [3:0] $end
$var reg 32 z immExt [31:0] $end
$var reg 32 { memoryAddressOut [31:0] $end
$var reg 32 | memoryDataOut [31:0] $end
$var reg 1 ] memoryWrite $end
$var reg 4 } readRegDest [3:0] $end
$var reg 4 ~ readRegFirst [3:0] $end
$var reg 4 !" readRegSec [3:0] $end
$var reg 33 "" tempDiff [32:0] $end
$var reg 32 #" writeData [31:0] $end
$var reg 1 X writeToReg $end
$upscope $end
$scope module ID $end
$var wire 1 % clk $end
$var wire 1 ' rst $end
$var wire 1 $" specialBit $end
$var wire 4 %" sourceSecReg [3:0] $end
$var wire 4 &" sourceFirstReg [3:0] $end
$var wire 4 '" secondLevelDecode [3:0] $end
$var wire 32 (" instruction [31:0] $end
$var wire 16 )" imm [15:0] $end
$var wire 2 *" firstLevelDecode [1:0] $end
$var wire 4 +" destReg [3:0] $end
$var wire 4 ," branchCondition [3:0] $end
$var wire 3 -" aluOperationCommands [2:0] $end
$var reg 3 ." aluFunction [2:0] $end
$var reg 1 f branch $end
$var reg 4 /" branchInstruction [3:0] $end
$var reg 1 c dataRegister $end
$var reg 1 b dataRegisterImm $end
$var reg 2 0" firstLevelDecode_out [1:0] $end
$var reg 1 - halt $end
$var reg 1 T loadStore $end
$var reg 4 1" out_destRegister [3:0] $end
$var reg 16 2" out_imm [15:0] $end
$var reg 4 3" out_sourceFirstReg [3:0] $end
$var reg 4 4" out_sourceSecReg [3:0] $end
$var reg 1 G regRead $end
$var reg 1 F regWrite $end
$var reg 4 5" secondLevelDecode_out [3:0] $end
$var reg 1 D setFlags $end
$var reg 1 C specialEncoding $end
$upscope $end
$scope module IF $end
$var wire 1 % clk $end
$var wire 16 6" exeData [15:0] $end
$var wire 1 ` exeOverride $end
$var wire 32 7" fetchedInstruction [31:0] $end
$var wire 16 8" imm16_exe [15:0] $end
$var wire 1 ' rst $end
$var wire 1 9" ucode_done $end
$var wire 7 :" mul_opcode_inside [6:0] $end
$var wire 4 ;" mul_imm_rs [3:0] $end
$var wire 4 <" mul_imm_rd [3:0] $end
$var wire 16 =" mul_imm_imm [15:0] $end
$var wire 16 >" imm16 [15:0] $end
$var wire 32 ?" ghost_instruction [31:0] $end
$var wire 32 @" branchOffsetAddress_exe [31:0] $end
$var wire 32 A" branchOffsetAddress [31:0] $end
$var parameter 32 B" sFilter $end
$var parameter 32 C" sIdle $end
$var parameter 32 D" sUcode $end
$var reg 32 E" filteredInstruction [31:0] $end
$var reg 4 F" ghost_PC [3:0] $end
$var reg 7 G" mul_opcode_out [6:0] $end
$var reg 32 H" programCounter [31:0] $end
$var reg 2 I" state [1:0] $end
$var reg 2 J" stateNext [1:0] $end
$var reg 1 B ucode_flag $end
$upscope $end
$scope module MEM $end
$var wire 32 K" addressIn [31:0] $end
$var wire 32 L" addressOut [31:0] $end
$var wire 1 % clk $end
$var wire 32 M" dataIn [31:0] $end
$var wire 32 N" dataOut [31:0] $end
$var wire 1 ' rst $end
$var wire 1 ) writeFlag $end
$var wire 1 ] writeIn $end
$upscope $end
$scope module REGFILE $end
$var wire 1 % clk $end
$var wire 4 O" rd [3:0] $end
$var wire 4 P" rs1 [3:0] $end
$var wire 4 Q" rs2 [3:0] $end
$var wire 1 ' rst $end
$var wire 1 B ucode_flag $end
$var wire 1 X write $end
$var wire 32 R" writeData [31:0] $end
$var wire 32 S" out_rs2 [31:0] $end
$var wire 32 T" out_rs1 [31:0] $end
$var wire 32 U" out_rd [31:0] $end
$var parameter 32 V" sIdle $end
$var parameter 32 W" sRegular $end
$var parameter 32 X" sUcode $end
$var reg 2 Y" state [1:0] $end
$var reg 2 Z" statePrev [1:0] $end
$var integer 32 [" i [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 \" j [31:0] $end
$upscope $end
$upscope $end
$scope module ucode_rom $end
$var wire 1 % clk $end
$var wire 4 ]" dest_reg [3:0] $end
$var wire 4 ^" ghost_pc [3:0] $end
$var wire 16 _" immediate [15:0] $end
$var wire 7 `" mul_opcode [6:0] $end
$var wire 4 a" reg1 [3:0] $end
$var wire 4 b" reg2 [3:0] $end
$var wire 1 ' rst $end
$var reg 32 c" output_instruction [31:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 d" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10 X"
b1 W"
b0 V"
b10 D"
b0 C"
b1 B"
$end
#0
$dumpvars
b11111 d"
b0 c"
bz b"
b0 a"
bx `"
b100 _"
b0 ^"
b0 ]"
bx \"
b10000 ["
b0 Z"
b0 Y"
b0 U"
b0 T"
b0 S"
b100 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b0 K"
b1 J"
b0 I"
b0 H"
bx G"
b0 F"
b100 E"
b100 A"
b100 @"
b0 ?"
b100 >"
b100 ="
b0 <"
b0 ;"
b0 :"
z9"
b100 8"
b100 7"
b100 6"
b0 5"
b0 4"
b0 3"
b100 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b100 )"
b100 ("
b0 '"
b0 &"
b0 %"
0$"
b100 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
bx x
b0 w
b0 v
b0 u
b0 t
b100 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b100 l
bx k
bx j
bx i
b0 h
b0 g
0f
b0 e
b0 d
0c
1b
b100 a
0`
b0 _
b0 ^
0]
b0 \
b0 [
b0 Z
b100 Y
1X
b0 W
b0 V
b100 U
0T
b100 S
b0 R
b0 Q
bx P
b0 O
b100 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
1G
1F
b0 E
0D
0C
0B
b0 A
b100 @
bx ?
bx >
bx =
b100 <
bx ;
bx :
bx 9
bx 8
bx 7
b0 6
b0 5
b0 4
13
b0 2
bx 1
b0 0
bx /
bx .
0-
b100 ,
bx +
b0 *
0)
z(
1'
1&
1%
bx $
bx #
bx "
z!
$end
#5
0%
#10
0X
b10000 ["
1%
#15
0%
#20
b10000 ["
1%
#25
0%
#30
0'
b10000 ["
1%
#35
0%
#40
b1 I"
b1 Y"
1%
#45
0%
#50
1C
0X
b0 Y
b0 #"
b0 R"
b11 )"
1$"
b11 @"
b11 8"
b11 a
b11 l
b11 6"
b11 N
b11 s
b11 2"
1G
1F
1b
b11 A"
b11 >"
b11 S
b11 ="
b11 _"
b10 J"
b100000000000000000000000000011 U
b100000000000000000000000000011 ("
b100000000000000000000000000011 E"
b10000 :"
b100000000000000000000000000011 ,
b100000000000000000000000000011 <
b100000000000000000000000000011 @
b100000000000000000000000000011 7"
b11111 d"
b1 Z"
b0 P
b0 G"
b0 `"
b100 *
b100 4
b100 K
b100 H"
1%
#55
0%
#60
b0 A"
b0 >"
b0 S
b0 ="
b0 _"
b1101000 :"
b11010000000000000000000000000000 ,
b11010000000000000000000000000000 <
b11010000000000000000000000000000 @
b11010000000000000000000000000000 7"
1X
b0 )"
0$"
b0 @"
b0 8"
b0 a
b0 l
b0 6"
b0 N
b0 s
b0 2"
1G
1F
0C
1b
b11111 d"
1B
b0 U
b0 ("
b0 E"
b10000 P
b10000 G"
b10000 `"
b1000 *
b1000 4
b1000 K
b1000 H"
b10 I"
1%
#65
0%
#70
1X
b1000 M
b1000 n
b1000 3"
b1000 &"
1G
1F
1b
1B
b100000000000000000000 U
b100000000000000000000 ("
b100000000000000000000 E"
b10 Y"
b100000000000000000000 A
b100000000000000000000 ?"
b100000000000000000000 c"
b0 V
b0 F"
b0 ^"
1%
#75
0%
#80
b1 V
b1 F"
b1 ^"
b10 Z"
b10000 \"
1%
#85
0%
#90
1c
1D
1C
b1 g
b1 w
b1 ."
b1 E
b1 o
b1 5"
b1 W
b1 t
b1 0"
0X
b1 -"
1$"
b0 &"
b1 '"
b1 *"
b0 M
b0 n
b0 3"
0G
0F
0b
1B
b1100010000000000000000000000000 U
b1100010000000000000000000000000 ("
b1100010000000000000000000000000 E"
b1100010000000000000000000000000 A
b1100010000000000000000000000000 ?"
b1100010000000000000000000000000 c"
b0 V
b0 F"
b0 ^"
1%
#95
0%
#100
1X
1F
1G
b1000 M
b1000 n
b1000 3"
1b
b0 E
b0 o
b0 5"
b0 W
b0 t
b0 0"
b1000 &"
b0 -"
b0 '"
0$"
b0 *"
b0 g
b0 w
b0 ."
0D
0C
0c
1B
b100000000000000000000 U
b100000000000000000000 ("
b100000000000000000000 E"
b0 V
b0 F"
b0 ^"
b100000000000000000000 A
b100000000000000000000 ?"
b100000000000000000000 c"
1%
#105
0%
#110
b1 V
b1 F"
b1 ^"
1%
#115
0%
#120
1c
1D
1C
b1 g
b1 w
b1 ."
b1 E
b1 o
b1 5"
b1 W
b1 t
b1 0"
0X
b1 -"
1$"
b0 &"
b1 '"
b1 *"
b0 M
b0 n
b0 3"
0G
0F
0b
1B
b1100010000000000000000000000000 U
b1100010000000000000000000000000 ("
b1100010000000000000000000000000 E"
b0 V
b0 F"
b0 ^"
b1100010000000000000000000000000 A
b1100010000000000000000000000000 ?"
b1100010000000000000000000000000 c"
1%
#125
0%
#130
1X
1F
1G
b1000 M
b1000 n
b1000 3"
1b
b0 E
b0 o
b0 5"
b0 W
b0 t
b0 0"
b1000 &"
b0 -"
b0 '"
0$"
b0 *"
b0 g
b0 w
b0 ."
0D
0C
0c
1B
b100000000000000000000 U
b100000000000000000000 ("
b100000000000000000000 E"
b100000000000000000000 A
b100000000000000000000 ?"
b100000000000000000000 c"
b0 V
b0 F"
b0 ^"
1%
#135
0%
#140
b1 V
b1 F"
b1 ^"
1%
#145
0%
#150
1c
1D
1C
b1 g
b1 w
b1 ."
b1 E
b1 o
b1 5"
b1 W
b1 t
b1 0"
0X
b1 -"
1$"
b0 &"
b1 '"
b1 *"
b0 M
b0 n
b0 3"
0G
0F
0b
1B
b1100010000000000000000000000000 U
b1100010000000000000000000000000 ("
b1100010000000000000000000000000 E"
b1100010000000000000000000000000 A
b1100010000000000000000000000000 ?"
b1100010000000000000000000000000 c"
b0 V
b0 F"
b0 ^"
1%
#155
0%
#160
1X
1F
1G
b1000 M
b1000 n
b1000 3"
1b
b0 E
b0 o
b0 5"
b0 W
b0 t
b0 0"
b1000 &"
b0 -"
b0 '"
0$"
b0 *"
b0 g
b0 w
b0 ."
0D
0C
0c
1B
b100000000000000000000 U
b100000000000000000000 ("
b100000000000000000000 E"
b0 V
b0 F"
b0 ^"
b100000000000000000000 A
b100000000000000000000 ?"
b100000000000000000000 c"
1%
#165
0%
#170
b1 V
b1 F"
b1 ^"
1%
#175
0%
#180
1c
1D
1C
b1 g
b1 w
b1 ."
b1 E
b1 o
b1 5"
b1 W
b1 t
b1 0"
0X
b1 -"
1$"
b0 &"
b1 '"
b1 *"
b0 M
b0 n
b0 3"
0G
0F
0b
1B
b1100010000000000000000000000000 U
b1100010000000000000000000000000 ("
b1100010000000000000000000000000 E"
b0 V
b0 F"
b0 ^"
b1100010000000000000000000000000 A
b1100010000000000000000000000000 ?"
b1100010000000000000000000000000 c"
1%
#185
0%
#190
1X
1F
1G
b1000 M
b1000 n
b1000 3"
1b
b0 E
b0 o
b0 5"
b0 W
b0 t
b0 0"
b1000 &"
b0 -"
b0 '"
0$"
b0 *"
b0 g
b0 w
b0 ."
0D
0C
0c
1B
b100000000000000000000 U
b100000000000000000000 ("
b100000000000000000000 E"
b100000000000000000000 A
b100000000000000000000 ?"
b100000000000000000000 c"
b0 V
b0 F"
b0 ^"
1%
#195
0%
#200
b1 V
b1 F"
b1 ^"
1%
#205
0%
#210
1c
1D
1C
b1 g
b1 w
b1 ."
b1 E
b1 o
b1 5"
b1 W
b1 t
b1 0"
0X
b1 -"
1$"
b0 &"
b1 '"
b1 *"
b0 M
b0 n
b0 3"
0G
0F
0b
1B
b1100010000000000000000000000000 U
b1100010000000000000000000000000 ("
b1100010000000000000000000000000 E"
b1100010000000000000000000000000 A
b1100010000000000000000000000000 ?"
b1100010000000000000000000000000 c"
b0 V
b0 F"
b0 ^"
1%
#215
0%
#220
1X
1F
1G
b1000 M
b1000 n
b1000 3"
1b
b0 E
b0 o
b0 5"
b0 W
b0 t
b0 0"
b1000 &"
b0 -"
b0 '"
0$"
b0 *"
b0 g
b0 w
b0 ."
0D
0C
0c
1B
b100000000000000000000 U
b100000000000000000000 ("
b100000000000000000000 E"
b0 V
b0 F"
b0 ^"
b100000000000000000000 A
b100000000000000000000 ?"
b100000000000000000000 c"
1%
#225
0%
#230
b1 V
b1 F"
b1 ^"
1%
#235
0%
#240
1c
1D
1C
b1 g
b1 w
b1 ."
b1 E
b1 o
b1 5"
b1 W
b1 t
b1 0"
0X
b1 -"
1$"
b0 &"
b1 '"
b1 *"
b0 M
b0 n
b0 3"
0G
0F
0b
1B
b1100010000000000000000000000000 U
b1100010000000000000000000000000 ("
b1100010000000000000000000000000 E"
b0 V
b0 F"
b0 ^"
b1100010000000000000000000000000 A
b1100010000000000000000000000000 ?"
b1100010000000000000000000000000 c"
1%
#245
0%
#250
1X
1F
1G
b1000 M
b1000 n
b1000 3"
1b
b0 E
b0 o
b0 5"
b0 W
b0 t
b0 0"
b1000 &"
b0 -"
b0 '"
0$"
b0 *"
b0 g
b0 w
b0 ."
0D
0C
0c
1B
b100000000000000000000 U
b100000000000000000000 ("
b100000000000000000000 E"
b100000000000000000000 A
b100000000000000000000 ?"
b100000000000000000000 c"
b0 V
b0 F"
b0 ^"
1%
#255
0%
#260
b1 V
b1 F"
b1 ^"
1%
#265
0%
#270
1c
1D
1C
b1 g
b1 w
b1 ."
b1 E
b1 o
b1 5"
b1 W
b1 t
b1 0"
0X
b1 -"
1$"
b0 &"
b1 '"
b1 *"
b0 M
b0 n
b0 3"
0G
0F
0b
1B
b1100010000000000000000000000000 U
b1100010000000000000000000000000 ("
b1100010000000000000000000000000 E"
b1100010000000000000000000000000 A
b1100010000000000000000000000000 ?"
b1100010000000000000000000000000 c"
b0 V
b0 F"
b0 ^"
1%
#275
0%
#280
1X
1F
1G
b1000 M
b1000 n
b1000 3"
1b
b0 E
b0 o
b0 5"
b0 W
b0 t
b0 0"
b1000 &"
b0 -"
b0 '"
0$"
b0 *"
b0 g
b0 w
b0 ."
0D
0C
0c
1B
b100000000000000000000 U
b100000000000000000000 ("
b100000000000000000000 E"
b0 V
b0 F"
b0 ^"
b100000000000000000000 A
b100000000000000000000 ?"
b100000000000000000000 c"
1%
#285
0%
#290
b1 V
b1 F"
b1 ^"
1%
#295
0%
#300
1c
1D
1C
b1 g
b1 w
b1 ."
b1 E
b1 o
b1 5"
b1 W
b1 t
b1 0"
0X
b1 -"
1$"
b0 &"
b1 '"
b1 *"
b0 M
b0 n
b0 3"
0G
0F
0b
1B
b1100010000000000000000000000000 U
b1100010000000000000000000000000 ("
b1100010000000000000000000000000 E"
b0 V
b0 F"
b0 ^"
b1100010000000000000000000000000 A
b1100010000000000000000000000000 ?"
b1100010000000000000000000000000 c"
1%
#305
0%
#310
1X
1F
1G
b1000 M
b1000 n
b1000 3"
1b
b0 E
b0 o
b0 5"
b0 W
b0 t
b0 0"
b1000 &"
b0 -"
b0 '"
0$"
b0 *"
b0 g
b0 w
b0 ."
0D
0C
0c
1B
b100000000000000000000 U
b100000000000000000000 ("
b100000000000000000000 E"
b100000000000000000000 A
b100000000000000000000 ?"
b100000000000000000000 c"
b0 V
b0 F"
b0 ^"
1%
#315
0%
#320
b1 V
b1 F"
b1 ^"
1%
#325
0%
#330
1c
1D
1C
b1 g
b1 w
b1 ."
b1 E
b1 o
b1 5"
b1 W
b1 t
b1 0"
0X
b1 -"
1$"
b0 &"
b1 '"
b1 *"
b0 M
b0 n
b0 3"
0G
0F
0b
1B
b1100010000000000000000000000000 U
b1100010000000000000000000000000 ("
b1100010000000000000000000000000 E"
b1100010000000000000000000000000 A
b1100010000000000000000000000000 ?"
b1100010000000000000000000000000 c"
b0 V
b0 F"
b0 ^"
1%
